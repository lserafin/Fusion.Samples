@page "/poker"
@using System.Threading
@using ActualLab.Fusion.Extensions
@inject IFusionTime Time
@inject NavigationManager Nav
@inject ICommander Commander
@inject PlanningPokerService PlanningPoker
@inherits ComputedStateComponent<(string Name, int Estimate, string Time)[]>

<h3>Planning Poker</h3>

@{
    var state = State.LastNonErrorValue;
    var error = State.Error;
}

<table class="table table-sm table-striped">
    <thead>
        <tr>
            <th scope="col">Name</th>
            <th scope="col">Estimate</th>
            <th scope="col">Time</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var (name, estimate, time) in state)
        {
            <tr>
                <td style="width: 15%; max-width: 20%">@name</td>
                <td style="width: auto; min-width: 60%">@estimate</td>
                <td style="width: 15%; max-width: 20%">@time</td>
            </tr>
        }
    </tbody>
</table>

<div class="alert alert-primary">
    Open this page in <a href="@Nav.Uri" target="_blank">another window</a> to see it updates in sync.
</div>
@if (error != null)
{
    <div class="alert alert-warning" role="alert">Update error: @error.Message</div>
}

<form @onsubmit="@Post">
    <div class="input-group pb-3">
        <div class="input-group-prepend">
            <input class="form-control" @bind-value="@Name" @bind-value:event="oninput" placeholder="Name" />
        </div>
        <div class="input-group-append">
            <button type="submit" class="btn btn-primary">Post Estimate</button>
        </div>
    </div>
</form>

@code {
    private string Name { get; set; } = "Neo";

    protected override async Task OnInitializedAsync()
        => await State.Update();

    protected override ComputedState<(string, int, string)[]>.Options GetStateOptions()
        => new() { InitialValue = Array.Empty<(string, int, string)>() };

    protected override async Task<(string Name, int Estimate, string Time)[]> ComputeState(CancellationToken cancellationToken)
    {
        var estimates = await PlanningPoker.GetEstimates(20, cancellationToken);
        var result = new List<(string Name, int Estimate, string Time)>();
        foreach (var estimate in estimates)
        {
            var momentsAgo = await Time.GetMomentsAgo(estimate.Time);
            result.Add((estimate.Name, estimate.Estimates, momentsAgo));
        }
        return result.ToArray();
    }

    private async Task Post()
    {
        await Commander.Call(new Estimate_Post(Name, new Random().Next(0, 11)));
    }
}